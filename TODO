TODO:
  ☐ WPの画像最適化プラグイン試す（WebP形式試す。そのあとlighthouseのスコアの違い確認 ※SEOに影響出そうか）
  ☐ firebase hosting側で利用すればCDNみたいになるかもしれない（画像がWPに登録してあるのを読みに行くため）
  ☐ gzip
  ☐ GAの設定
  ☐ lazyimg
  ☐ asyncDataで描画した時とcreatedでタイミングを送らせて描画した時とのlighthouseのスコアの違い（後追いの描画nuxtだと実装楽。SEOに影響しないコンテンツなら積極的に利用してもいいかも。文章量が多い時に関連コンテンツのみを読み込ませる意味でSEO的に良い？もしくは描画コンテンツがサーバーとクライアントで違うということでNG？結局はGoogleがJSのレンダリングも認識してくれるようになれば考える必要ない？）
  ☐ SCSSのコンパイルをscopedで行えるようにする
  ☐ bootstrapカスタマイズ
  ☐ PWAの実装確認
  ☐ client-onlyの「fetch as google」「googleオプティマイズ」との兼ね合い調査
  ☐ 現在地情報の取得
  ☐ ページ遷移時の「asyncData」内で「process.env」が挙動しない→一旦保留
  ☐ envファイル、テスト環境と出し分け→一旦保留

最後に対応:
  ☐ mixinsにまとめるスクリプトあるか検討
  ☐ 最後にVScodeまわりの修正あれば「00」のほうにコピーしておく

Archive:
  ✔ sitemapの作成 @done(20-11-05 04:37) @project(TODO)
  ✔ WPの子テーマ設定 @done(20-11-03 23:45) @project(TODO)
  ✔ WPのカスタム投稿「cat」設定 @done(20-11-03 23:45) @project(TODO)
  ✔ WPのrest api設定 @done(20-11-03 23:45) @project(TODO)
  ✔ CROS対応がサーバー側で必要だったら対応→問題なし（静的書き出しだからCROS関係ない？） @done(20-11-04 23:51) @project(TODO)
  ✔ flickerで画像の読み込みスクリプト @done(20-10-30 19:38) @project(TODO)
  ✔ WPからの取得データ計画 @done(20-10-27 07:16) @project(TODO)
  ✔ metaデータの設定 @done(20-10-29 02:44) @project(TODO)
  ✔ 構造化データの設定 @done(20-10-28 03:07) @project(TODO)
  ✔ envファイルの設定 @done(20-10-28 03:08) @project(TODO)
  ✔ 静的HTMLのルーティング設定 @done(20-10-29 02:41) @project(TODO)

Memo:
  ■■■ 参考 ■■■
  ・HTML要素にlang属性をつける
  https://syon.github.io/til/2018/10/27/nuxt-html-attrs/
  →でもnuxt.configのほうにつけても上手くいかなかった

  ・WP REST APIのカスタムエンドポイント
  https://knowledge.cpi.ad.jp/cms/wp-rest-api2/

  ■■■ 反省など ■■■
